generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Providers {
  local
  google
  github
}

enum WorkSpaceRole {
  admin
  user
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  accountProviderId String
  refreshToken      String?

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountProvider AccountProvider @relation(fields: [accountProviderId], references: [id])

  @@map("Accounts")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  password  String
  image     String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  workspacesMember WorkspaceMember[]
  accounts         Account[]

  @@map("Users")
}

model AccountProvider {
  id   String    @id @default(cuid())
  name Providers @unique

  accounts Account[]

  @@map("AccountsProviders")
}

model Workspace {
  id   String @id @default(cuid())
  name String

  workspacesMembers WorkspaceMember[]
  boards            Board[]

  @@map("Workspaces")
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  workspaceId String
  userId      String
  role        WorkSpaceRole

  cardComments CardCommet[]
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace    Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("WorkspaceMembers")
}

model WorkspaceInvitation {
  fromWorkspaceMemberId String
  toWorkspaceMemberId   String

  @@id([fromWorkspaceMemberId, toWorkspaceMemberId])
}

model Board {
  id          String @id @default(cuid())
  name        String
  workspaceId String

  boardLists BoardList[]
  workspace  Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("Boards")
}

model BoardList {
  id      String @id @default(cuid())
  name    String
  number  Int
  boardId String

  cards Card[]
  board Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@map("BoardsLists")
}

model Card {
  id          String    @id @default(cuid())
  title       String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  boardListId String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now())

  cardComments CardCommet[]
  boardList    BoardList    @relation(fields: [boardListId], references: [id], onDelete: Cascade)

  @@map("Cards")
}

model CardCommet {
  id                String    @id @default(cuid())
  content           String
  workspaceMemberId String
  cardId            String
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @default(now())

  card            Card            @relation(fields: [cardId], references: [id], onDelete: Cascade)
  workspaceMember WorkspaceMember @relation(fields: [workspaceMemberId], references: [id])

  @@map("CardsComments")
}
